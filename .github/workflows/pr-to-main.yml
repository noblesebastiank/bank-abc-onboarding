name: PR to Main - Build, Test and Build Image

on:
  pull_request:
    branches:
      - main

env:
  # Uncomment and configure these environment variables when ready for deployment
  # ACR_NAME: your-acr-name
  # DEV_RESOURCE_GROUP: your-dev-resource-group
  # DEV_AKS_CLUSTER: your-dev-aks-cluster
  # DEV_NAMESPACE: dev

jobs:
  pr-validation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and Test with Maven
        run: mvn clean install
        continue-on-error: false # Fail fast if tests fail

      - name: Extract version from pom.xml
        id: version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Build Docker image
        run: |
          docker build -t bank-abc-onboarding:${{ steps.version.outputs.version }} .
          docker build -t bank-abc-onboarding:${{ steps.version.outputs.version }}-${{ github.sha }} .
          docker build -t bank-abc-onboarding:latest .

      # Uncomment the following steps when ready for deployment
      
      # - name: Login to Azure Container Registry
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}
      #   if: github.event.pull_request.merged == true
      
      # - name: Push Docker image to ACR
      #   run: |
      #     az acr login --name ${{ env.ACR_NAME }}
      #     docker tag bank-abc-onboarding:${{ steps.version.outputs.version }} ${{ env.ACR_NAME }}.azurecr.io/bank-abc-onboarding:${{ steps.version.outputs.version }}
      #     docker tag bank-abc-onboarding:${{ steps.version.outputs.version }}-${{ github.sha }} ${{ env.ACR_NAME }}.azurecr.io/bank-abc-onboarding:${{ steps.version.outputs.version }}-${{ github.sha }}
      #     docker tag bank-abc-onboarding:latest ${{ env.ACR_NAME }}.azurecr.io/bank-abc-onboarding:latest
      #     docker push ${{ env.ACR_NAME }}.azurecr.io/bank-abc-onboarding:${{ steps.version.outputs.version }}
      #     docker push ${{ env.ACR_NAME }}.azurecr.io/bank-abc-onboarding:${{ steps.version.outputs.version }}-${{ github.sha }}
      #     docker push ${{ env.ACR_NAME }}.azurecr.io/bank-abc-onboarding:latest
      #   if: github.event.pull_request.merged == true
      
      # - name: Deploy to Dev AKS
      #   run: |
      #     az aks get-credentials --resource-group ${{ env.DEV_RESOURCE_GROUP }} --name ${{ env.DEV_AKS_CLUSTER }} --overwrite-existing
      #     kubectl set image deployment/bank-abc-onboarding bank-abc-onboarding=${{ env.ACR_NAME }}.azurecr.io/bank-abc-onboarding:${{ steps.version.outputs.version }} -n ${{ env.DEV_NAMESPACE }}
      #     kubectl rollout status deployment/bank-abc-onboarding -n ${{ env.DEV_NAMESPACE }} --timeout=300s
      #   if: github.event.pull_request.merged == true
      
      # - name: Run Integration Tests
      #   run: |
      #     # Wait for deployment to be ready
      #     kubectl wait --for=condition=available --timeout=300s deployment/bank-abc-onboarding -n ${{ env.DEV_NAMESPACE }}
      #     
      #     # Get the service URL
      #     SERVICE_URL=$(kubectl get service bank-abc-onboarding -n ${{ env.DEV_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
      #     echo "Service URL: http://$SERVICE_URL:8080"
      #     
      #     # Run integration tests against the deployed service
      #     mvn test -Dtest=*IntegrationTest -Dservice.url=http://$SERVICE_URL:8080
      #   if: github.event.pull_request.merged == true
      
      # - name: Comment PR with deployment status
      #   uses: actions/github-script@v6
      #   if: github.event.pull_request.merged == true
      #   with:
      #     script: |
      #       const commentBody = `ðŸš€ **Deployment to Dev AKS Complete!**
      #       
      #       **Deployment Details:**
      #       - **Version**: ${{ steps.version.outputs.version }}
      #       - **Commit**: ${{ github.sha }}
      #       - **Environment**: Development AKS
      #       - **Namespace**: ${{ env.DEV_NAMESPACE }}
      #       - **Status**: âœ… Deployed Successfully
      #       
      #       **Image Tags:**
      #       - \`${{ env.ACR_NAME }}.azurecr.io/bank-abc-onboarding:${{ steps.version.outputs.version }}\`
      #       - \`${{ env.ACR_NAME }}.azurecr.io/bank-abc-onboarding:${{ steps.version.outputs.version }}-${{ github.sha }}\`
      #       - \`${{ env.ACR_NAME }}.azurecr.io/bank-abc-onboarding:latest\`
      #       
      #       **Next Steps:**
      #       - Integration tests have been executed
      #       - Service is ready for testing
      #       - Monitor logs: \`kubectl logs -f deployment/bank-abc-onboarding -n ${{ env.DEV_NAMESPACE }}\``;
      #       
      #       await github.rest.issues.createComment({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #         body: commentBody
      #       });
